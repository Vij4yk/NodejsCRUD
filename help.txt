
Starting App
START APP type: nodemon or nodemon app.js in App directory.
        - type: node app.js in App directory.
       or type: node server.js for basic http request.


db.seq.query('SELECT * FROM posts, users WHERE posts.user_id = users.id ').success(function(rows){
            res.json(rows);
        });


Model File Structure

All the examples in the Sequelize documentation show all model declarations grouped in a single file. Once a project reaches production size, this is not a viable approach. The alternative is to import models from a module using sequelize.import().

The problem is that relationships rely on several models. When you declare a relationship, models from both sides of the relationship must already be imported. You should not import model files from other model files because of Node.js module caching policy (more on that later on); instead, you can define relationships in a standalone file.

Here is the file structure we've been working with:

models/
  index.js      # import all models and creates relationships
  PhoneNumber.js
  Task.js
  User.js
  ...
And here is how the main models/index.js initializes the entire model:

var Sequelize = require('sequelize');
var config    = require('config').database;  // we use node-config to handle environments

// initialize database connection
var sequelize = new Sequelize(
  config.name,
  config.username,
  config.password,
  config.options
);

// load models
var models = [
  'PhoneNumber',
  'Task',
  'User'
];
models.forEach(function(model) {
  module.exports[model] = sequelize.import(__dirname + '/' + model);
});

// describe relationships
(function(m) {
  m.PhoneNumber.belongsTo(m.User);
  m.Task.belongsTo(m.User);
  m.User.hasMany(m.Task);
  m.User.hasMany(m.PhoneNumber);
})(module.exports);

// export connection
module.exports.sequelize = sequelize;
Using Models In Code

From other parts of the application, if you need a model class, require the models/index.js instead of the standalone model file. That way, you don't have to repeat the Sequelize initialization.

var models = require('./models');
var User = models.User;

var user = User.build({ first_name: "John", last_name: "Doe "});
The problem is, when you require the models/index.js file, Node may use a cached version of the module... or not:

From nodejs.org:

Multiple calls to require('foo') may not cause the module code to be executed multiple times. (...) Modules are cached based on their resolved filename. Since modules may resolve to a different filename based on the location of the calling module (loading from node_modules folders), it is not a guarantee that require('foo') will always return the exact same object, if it would resolve to different files.
That means that using require('./models') to get the models may create more than one connection to the database. To avoid that, the models variable must be somehow singleton-esque. This can be easily achieved, if you're using a framework like expressjs, by attaching the models module to the application:

app.set('models', require('./models'));
And when you need to require a class of the model in a controller, use this application setting rather than a direct import:

var User = app.get('models').User;